So we recently did a similar but just opposite problem of merge sort that is quick sort
  "QUICK SORT"
  CODE:-


#include <iostream>
using namespace std;

int partition(int arr[], int s, int e) {
    int pivot = arr[s];
    int cnt=0;

    for (int j = s+1; j <=e; j++) {
        if (arr[j] <= pivot) {
            }
    }
   int pivotidx = cnt+s;
    swap(arr[pivotidx], arr[s]);  
    int i=s,j=e;
    while(i<pivotidx && j>pivotindex){
       while(arr[i]<=pivotidx){
         i++;
       }
       while(arr[i]>pivotidx){
         j--;
       }
      if(i<pivotidx && j>pivotindex){
        swap(arr[i++],arr[j--]);}
    }
    
    }
return pivotidx;

}

void quickSort(int arr[], int s, int e) {
    if (s < =e) { return };
        int pi = partition(arr, s,e);

        quickSort(arr, s, pi - 1);
        quickSort(arr, pi + 1, e);

}

int main() {
    int arr[] = {10, 7, 8, 9, 1, 5};
    int n = sizeof(arr) / sizeof(arr[0]);

    quickSort(arr, 0, n - 1);

    cout << "Sorted array: ";
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }
    return 0;
}


 ### I also understood how   QUICK SORT   is better approach in cases of ARRAY and   MERGE SORT   is better approach for   LINKLIST 
->In quicksort to position pivot element we have to access array again and again therefore it will be kept in cache memory as it has good locality of refrence 
->In mergesort as we have to insert elements in between it would be easy to insert it in link list take only o(1) time and space complexity where as it takes o(n) in array
