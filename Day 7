## RAT IN MAZE

#include<iostream>
#include<vector>
using namespace std;

bool isSafe(vector<vector<int>> m, int n, int x, int y, vector<vector<int>> &visited) {
    if (x >= 0 && x < n && y >= 0 && y < n && m[x][y] == 1 && visited[x][y] == 0) {
        return true;
    }
    return false;
}

void solve(vector<string> &ans, string output, vector<vector<int>> m, int n, int x, int y, vector<vector<int>> &visited) {
    if (x == n - 1 && y == n - 1) {
        ans.push_back(output);
        return;
    }
    visited[x][y] = 1;

    // Down
    int newx = x + 1;
    int newy = y;
    if (isSafe(m, n, newx, newy, visited)) {
        output.push_back('D');
        solve(ans, output, m, n, newx, newy, visited);
        output.pop_back();
    }

    // Left
    newx = x;
    newy = y - 1;
    if (isSafe(m, n, newx, newy, visited)) {
        output.push_back('L');
        solve(ans, output, m, n, newx, newy, visited);
        output.pop_back();
    }

    // Right
    newx = x;
    newy = y + 1;
    if (isSafe(m, n, newx, newy, visited)) {
        output.push_back('R');
        solve(ans, output, m, n, newx, newy, visited);
        output.pop_back();
    }

    // Up
    newx = x - 1;
    newy = y;
    if (isSafe(m, n, newx, newy, visited)) {
        output.push_back('U');
        solve(ans, output, m, n, newx, newy, visited);
        output.pop_back();
    }

    visited[x][y] = 0;
}

int main() {
    int n = 4;
    vector<vector<int>> m = {{1, 0, 0, 0}, {1, 1, 0, 1}, {1, 1, 0, 0}, {0, 1, 1, 1}};
    vector<string> ans;
    vector<vector<int>> visited(n, vector<int>(n, 0));
    string output = "";
    int srcx = 0;
    int srcy = 0;

    solve(ans, output, m, n, srcx, srcy, visited);

    cout << "Possible paths:\n";
    for (const string &path : ans) {
        cout << path << endl;
    }

    return 0;
}




## NQUEEN PROBLEM


class Solution {
public: 
    bool isSafe(int n,int row,int col,vector<string> board){
      for(int j=0;j<n;j++){
          if(board[row][j]=='Q'){
            return false;
          }
      }
      for(int i=0;i<n;i++){
       if(board[i][col]=='Q'){
            return false;
          }
        }
        for(int i=row,j=col;i>=0 && j>=0;i--,j--){
            if(board[i][j]=='Q'){
                return false;
            }
        }
        for(int i=row,j=col;i>=0 && j<n;i--,j++){
            if(board[i][j]=='Q'){
                return false;
            }
        }
        return true;
    }
    void solve(int n ,vector<vector<string>> &ans, vector<string> board,int row){
        if(row==n){
            ans.push_back(board);
            return;
        }
        for(int j=0;j<n;j++){
        if(isSafe(n,row,j,board)){
            board[row][j]='Q';
            solve(n,ans,board,row+1);
            board[row][j]='.';
        }
    }}
    vector<vector<string>> solveNQueens(int n) {
         vector<vector<string>> ans;
        vector<string> board(n,string(n,'.'));
        int row=0;
        solve(n,ans,board,row);
        return ans;
    }
};



HERE I ALSO CAME TO KNOW HOW TO INITIALISE A 2D VECTOR IN 1D VECTOR
    Can also do it like ->  vector<string> board(n,string(n,'.'));
                                ["....",
                                 "....",
                                 "....",
                                 "...."]

                        ->  vector<vector<char>> board(n,vector<char>(n,'.')); if individual character manipulation is needed.
                            {{'.', '.', '.', '.'},
                             {'.', '.', '.', '.'},
                             {'.', '.', '.', '.'},
                             {'.', '.', '.', '.'}}
